// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: tictac.proto

package tictac

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TictacSvcClient is the client API for TictacSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TictacSvcClient interface {
	Countdown(ctx context.Context, in *CountdownReq, opts ...grpc.CallOption) (TictacSvc_CountdownClient, error)
}

type tictacSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewTictacSvcClient(cc grpc.ClientConnInterface) TictacSvcClient {
	return &tictacSvcClient{cc}
}

func (c *tictacSvcClient) Countdown(ctx context.Context, in *CountdownReq, opts ...grpc.CallOption) (TictacSvc_CountdownClient, error) {
	stream, err := c.cc.NewStream(ctx, &TictacSvc_ServiceDesc.Streams[0], "/TictacSvc/Countdown", opts...)
	if err != nil {
		return nil, err
	}
	x := &tictacSvcCountdownClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TictacSvc_CountdownClient interface {
	Recv() (*CountdownRes, error)
	grpc.ClientStream
}

type tictacSvcCountdownClient struct {
	grpc.ClientStream
}

func (x *tictacSvcCountdownClient) Recv() (*CountdownRes, error) {
	m := new(CountdownRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TictacSvcServer is the server API for TictacSvc service.
// All implementations must embed UnimplementedTictacSvcServer
// for forward compatibility
type TictacSvcServer interface {
	Countdown(*CountdownReq, TictacSvc_CountdownServer) error
	mustEmbedUnimplementedTictacSvcServer()
}

// UnimplementedTictacSvcServer must be embedded to have forward compatible implementations.
type UnimplementedTictacSvcServer struct {
}

func (UnimplementedTictacSvcServer) Countdown(*CountdownReq, TictacSvc_CountdownServer) error {
	return status.Errorf(codes.Unimplemented, "method Countdown not implemented")
}
func (UnimplementedTictacSvcServer) mustEmbedUnimplementedTictacSvcServer() {}

// UnsafeTictacSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TictacSvcServer will
// result in compilation errors.
type UnsafeTictacSvcServer interface {
	mustEmbedUnimplementedTictacSvcServer()
}

func RegisterTictacSvcServer(s grpc.ServiceRegistrar, srv TictacSvcServer) {
	s.RegisterService(&TictacSvc_ServiceDesc, srv)
}

func _TictacSvc_Countdown_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CountdownReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TictacSvcServer).Countdown(m, &tictacSvcCountdownServer{stream})
}

type TictacSvc_CountdownServer interface {
	Send(*CountdownRes) error
	grpc.ServerStream
}

type tictacSvcCountdownServer struct {
	grpc.ServerStream
}

func (x *tictacSvcCountdownServer) Send(m *CountdownRes) error {
	return x.ServerStream.SendMsg(m)
}

// TictacSvc_ServiceDesc is the grpc.ServiceDesc for TictacSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TictacSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TictacSvc",
	HandlerType: (*TictacSvcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Countdown",
			Handler:       _TictacSvc_Countdown_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tictac.proto",
}
